<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/data/database/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/data/database/AppDatabase.kt" />
              <option name="originalContent" value="package com.example.firstaidapp.data.database&#10;&#10;import android.content.Context&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import androidx.room.TypeConverters&#10;import androidx.room.migration.Migration&#10;import androidx.sqlite.db.SupportSQLiteDatabase&#10;import com.example.firstaidapp.data.models.*&#10;&#10;@Database(&#10;    entities = [&#10;        FirstAidGuide::class,&#10;        EmergencyContact::class,&#10;        SearchHistory::class&#10;    ],&#10;    version = 8, // Updated GuideStep fields: duration as String, added imageRes (7-&gt;8)&#10;    exportSchema = false&#10;)&#10;@TypeConverters(Converters::class)&#10;abstract class AppDatabase : RoomDatabase() {&#10;&#10;    abstract fun guideDao(): GuideDao&#10;    abstract fun contactDao(): ContactDao&#10;    abstract fun searchDao(): SearchDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: AppDatabase? = null&#10;&#10;        // Migration from 3 to 4: add columns used by queries/UI to first_aid_guides&#10;        private val MIGRATION_3_4 = object : Migration(3, 4) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add columns with defaults to satisfy NOT NULL constraints&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN isFavorite INTEGER NOT NULL DEFAULT 0&quot;)&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN lastAccessedTimestamp INTEGER NOT NULL DEFAULT 0&quot;)&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN viewCount INTEGER NOT NULL DEFAULT 0&quot;)&#10;            }&#10;        }&#10;&#10;        // Migration from 4 to 5: add unique index on emergency_contacts(phoneNumber, type)&#10;        private val MIGRATION_4_5 = object : Migration(4, 5) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Remove duplicates so unique index can be created safely&#10;                db.execSQL(&#10;                    &quot;DELETE FROM emergency_contacts WHERE id NOT IN (&quot; +&#10;                            &quot;SELECT MIN(id) FROM emergency_contacts GROUP BY phoneNumber, type&quot; +&#10;                            &quot;)&quot;&#10;                )&#10;                // Create the unique index&#10;                db.execSQL(&#10;                    &quot;CREATE UNIQUE INDEX IF NOT EXISTS index_emergency_contacts_phoneNumber_type ON emergency_contacts(phoneNumber, type)&quot;&#10;                )&#10;            }&#10;        }&#10;&#10;        // Migration from 5 to 6: add youtubeLink column to first_aid_guides&#10;        private val MIGRATION_5_6 = object : Migration(5, 6) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add youtubeLink column with empty string as default&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN youtubeLink TEXT NOT NULL DEFAULT ''&quot;)&#10;            }&#10;        }&#10;&#10;        // Migration from 6 to 7: add state column to emergency_contacts&#10;        private val MIGRATION_6_7 = object : Migration(6, 7) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add state column with NULL as default to allow existing data&#10;                db.execSQL(&quot;ALTER TABLE emergency_contacts ADD COLUMN state TEXT&quot;)&#10;            }&#10;        }&#10;&#10;        // Migration from 7 to 8: update guide_steps for duration and imageRes changes&#10;        private val MIGRATION_7_8 = object : Migration(7, 8) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add imageRes column to guide_steps&#10;                db.execSQL(&quot;ALTER TABLE guide_steps ADD COLUMN imageRes INTEGER&quot;)&#10;                // Note: duration field type change from INT to TEXT is handled automatically by Room&#10;                // as SQLite is dynamically typed and will accept both&#10;            }&#10;        }&#10;&#10;        fun getDatabase(context: Context): AppDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;first_aid_database&quot;&#10;                )&#10;                    // Replace destructive fallback with proper migrations&#10;                    .addMigrations(MIGRATION_3_4, MIGRATION_4_5, MIGRATION_5_6, MIGRATION_6_7, MIGRATION_7_8)&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.firstaidapp.data.database&#10;&#10;import android.content.Context&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import androidx.room.TypeConverters&#10;import androidx.room.migration.Migration&#10;import androidx.sqlite.db.SupportSQLiteDatabase&#10;import com.example.firstaidapp.data.models.*&#10;&#10;@Database(&#10;    entities = [&#10;        FirstAidGuide::class,&#10;        GuideStep::class,&#10;        EmergencyContact::class,&#10;        SearchHistory::class&#10;    ],&#10;    version = 9, // Fixed schema mismatch and added guide_steps table (8-&gt;9)&#10;    exportSchema = false&#10;)&#10;@TypeConverters(Converters::class)&#10;abstract class AppDatabase : RoomDatabase() {&#10;&#10;    abstract fun guideDao(): GuideDao&#10;    abstract fun contactDao(): ContactDao&#10;    abstract fun searchDao(): SearchDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: AppDatabase? = null&#10;&#10;        // Migration from 3 to 4: add columns used by queries/UI to first_aid_guides&#10;        private val MIGRATION_3_4 = object : Migration(3, 4) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add columns with defaults to satisfy NOT NULL constraints&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN isFavorite INTEGER NOT NULL DEFAULT 0&quot;)&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN lastAccessedTimestamp INTEGER NOT NULL DEFAULT 0&quot;)&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN viewCount INTEGER NOT NULL DEFAULT 0&quot;)&#10;            }&#10;        }&#10;&#10;        // Migration from 4 to 5: add unique index on emergency_contacts(phoneNumber, type)&#10;        private val MIGRATION_4_5 = object : Migration(4, 5) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Remove duplicates so unique index can be created safely&#10;                db.execSQL(&#10;                    &quot;DELETE FROM emergency_contacts WHERE id NOT IN (&quot; +&#10;                            &quot;SELECT MIN(id) FROM emergency_contacts GROUP BY phoneNumber, type&quot; +&#10;                            &quot;)&quot;&#10;                )&#10;                // Create the unique index&#10;                db.execSQL(&#10;                    &quot;CREATE UNIQUE INDEX IF NOT EXISTS index_emergency_contacts_phoneNumber_type ON emergency_contacts(phoneNumber, type)&quot;&#10;                )&#10;            }&#10;        }&#10;&#10;        // Migration from 5 to 6: add youtubeLink column to first_aid_guides&#10;        private val MIGRATION_5_6 = object : Migration(5, 6) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add youtubeLink column with empty string as default&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides ADD COLUMN youtubeLink TEXT NOT NULL DEFAULT ''&quot;)&#10;            }&#10;        }&#10;&#10;        // Migration from 6 to 7: add state column to emergency_contacts&#10;        private val MIGRATION_6_7 = object : Migration(6, 7) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Add state column with NULL as default to allow existing data&#10;                db.execSQL(&quot;ALTER TABLE emergency_contacts ADD COLUMN state TEXT&quot;)&#10;            }&#10;        }&#10;&#10;        // Migration from 7 to 8: create guide_steps table&#10;        private val MIGRATION_7_8 = object : Migration(7, 8) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Create guide_steps table (it didn't exist before)&#10;                db.execSQL(&quot;&quot;&quot;&#10;                    CREATE TABLE IF NOT EXISTS guide_steps (&#10;                        id TEXT PRIMARY KEY NOT NULL,&#10;                        guideId TEXT NOT NULL,&#10;                        stepNumber INTEGER NOT NULL,&#10;                        title TEXT NOT NULL,&#10;                        description TEXT NOT NULL,&#10;                        stepType TEXT NOT NULL,&#10;                        isCritical INTEGER NOT NULL,&#10;                        imageUrl TEXT,&#10;                        videoUrl TEXT,&#10;                        duration TEXT,&#10;                        detailedInstructions TEXT,&#10;                        iconRes INTEGER,&#10;                        imageRes INTEGER,&#10;                        tips TEXT,&#10;                        warnings TEXT,&#10;                        requiredTools TEXT&#10;                    )&#10;                &quot;&quot;&quot;.trimIndent())&#10;            }&#10;        }&#10;&#10;        // Migration from 8 to 9: fix schema mismatch in first_aid_guides and emergency_contacts&#10;        private val MIGRATION_8_9 = object : Migration(8, 9) {&#10;            override fun migrate(db: SupportSQLiteDatabase) {&#10;                // Fix first_aid_guides table&#10;                db.execSQL(&quot;&quot;&quot;&#10;                    CREATE TABLE IF NOT EXISTS first_aid_guides_new (&#10;                        id TEXT PRIMARY KEY NOT NULL,&#10;                        title TEXT NOT NULL,&#10;                        category TEXT NOT NULL,&#10;                        severity TEXT NOT NULL,&#10;                        description TEXT NOT NULL,&#10;                        steps TEXT NOT NULL,&#10;                        iconResName TEXT,&#10;                        whenToCallEmergency TEXT,&#10;                        warnings TEXT NOT NULL,&#10;                        estimatedTimeMinutes INTEGER NOT NULL,&#10;                        difficulty TEXT NOT NULL,&#10;                        youtubeLink TEXT,&#10;                        isFavorite INTEGER NOT NULL,&#10;                        lastAccessedTimestamp INTEGER NOT NULL,&#10;                        viewCount INTEGER NOT NULL&#10;                    )&#10;                &quot;&quot;&quot;.trimIndent())&#10;                &#10;                db.execSQL(&quot;&quot;&quot;&#10;                    INSERT INTO first_aid_guides_new &#10;                    (id, title, category, severity, description, steps, iconResName, &#10;                     whenToCallEmergency, warnings, estimatedTimeMinutes, difficulty, &#10;                     youtubeLink, isFavorite, lastAccessedTimestamp, viewCount)&#10;                    SELECT id, title, category, severity, description, steps, iconResName,&#10;                           whenToCallEmergency, warnings, estimatedTimeMinutes, difficulty,&#10;                           youtubeLink, isFavorite, lastAccessedTimestamp, viewCount&#10;                    FROM first_aid_guides&#10;                &quot;&quot;&quot;.trimIndent())&#10;                &#10;                db.execSQL(&quot;DROP TABLE first_aid_guides&quot;)&#10;                db.execSQL(&quot;ALTER TABLE first_aid_guides_new RENAME TO first_aid_guides&quot;)&#10;                &#10;                // Fix emergency_contacts table&#10;                db.execSQL(&quot;&quot;&quot;&#10;                    CREATE TABLE IF NOT EXISTS emergency_contacts_new (&#10;                        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,&#10;                        name TEXT NOT NULL,&#10;                        phoneNumber TEXT NOT NULL,&#10;                        type TEXT NOT NULL,&#10;                        state TEXT NOT NULL DEFAULT 'National',&#10;                        isDefault INTEGER NOT NULL,&#10;                        description TEXT,&#10;                        relationship TEXT,&#10;                        notes TEXT,&#10;                        isActive INTEGER NOT NULL DEFAULT 1&#10;                    )&#10;                &quot;&quot;&quot;.trimIndent())&#10;                &#10;                db.execSQL(&quot;&quot;&quot;&#10;                    INSERT INTO emergency_contacts_new &#10;                    (id, name, phoneNumber, type, state, isDefault, description, relationship, notes, isActive)&#10;                    SELECT id, name, phoneNumber, type, &#10;                           COALESCE(state, 'National'), &#10;                           isDefault, &#10;                           NULL,&#10;                           relationship, &#10;                           notes,&#10;                           1&#10;                    FROM emergency_contacts&#10;                &quot;&quot;&quot;.trimIndent())&#10;                &#10;                db.execSQL(&quot;DROP TABLE emergency_contacts&quot;)&#10;                db.execSQL(&quot;ALTER TABLE emergency_contacts_new RENAME TO emergency_contacts&quot;)&#10;                &#10;                // Recreate the unique index&#10;                db.execSQL(&quot;&quot;&quot;&#10;                    CREATE UNIQUE INDEX IF NOT EXISTS index_emergency_contacts_phoneNumber_type &#10;                    ON emergency_contacts(phoneNumber, type)&#10;                &quot;&quot;&quot;.trimIndent())&#10;            }&#10;        }&#10;&#10;        fun getDatabase(context: Context): AppDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;first_aid_database&quot;&#10;                )&#10;                    .addMigrations(MIGRATION_3_4, MIGRATION_4_5, MIGRATION_5_6, MIGRATION_6_7, MIGRATION_7_8, MIGRATION_8_9)&#10;                    .fallbackToDestructiveMigration() // Add fallback in case migration fails&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/ui/home/VideoMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/ui/home/VideoMapper.kt" />
              <option name="originalContent" value="package com.example.firstaidapp.ui.home&#10;&#10;/**&#10; * Maps first aid guide titles to their corresponding MP4 video files&#10; * This provides real video demonstrations for better understanding&#10; */&#10;object VideoMapper {&#10;&#10;    private val videoMap = mapOf(&#10;        // Life-Threatening Emergencies - Critical procedure videos&#10;        &quot;CPR&quot; to &quot;videos/cpr_demonstration.mp4&quot;,&#10;        &quot;Choking&quot; to &quot;videos/choking_heimlich.mp4&quot;,&#10;        &quot;Heart Attack&quot; to &quot;videos/heart_attack_response.mp4&quot;,&#10;        &quot;Stroke&quot; to &quot;videos/stroke_fast_assessment.mp4&quot;,&#10;        &quot;Drowning&quot; to &quot;videos/drowning_rescue.mp4&quot;,&#10;&#10;        // Trauma &amp; Injuries - Medical procedure videos&#10;        &quot;Severe Bleeding&quot; to &quot;videos/bleeding_control.mp4&quot;,&#10;        &quot;Burns&quot; to &quot;videos/burns_treatment.mp4&quot;,&#10;        &quot;Fractures&quot; to &quot;videos/fracture_immobilization.mp4&quot;,&#10;        &quot;Sprains and Strains&quot; to &quot;videos/sprain_care.mp4&quot;,&#10;        &quot;Eye Injuries&quot; to &quot;videos/eye_injury_care.mp4&quot;,&#10;        &quot;Nosebleeds&quot; to &quot;videos/nosebleed_control.mp4&quot;,&#10;&#10;        // Medical Conditions - Emergency response videos&#10;        &quot;Allergic Reactions&quot; to &quot;videos/anaphylaxis_epipen.mp4&quot;,&#10;        &quot;Asthma Attack&quot; to &quot;videos/asthma_inhaler.mp4&quot;,&#10;        &quot;Diabetic Emergencies&quot; to &quot;videos/diabetes_response.mp4&quot;,&#10;        &quot;Seizures&quot; to &quot;videos/seizure_response.mp4&quot;,&#10;        &quot;Poisoning&quot; to &quot;videos/poisoning_response.mp4&quot;,&#10;        &quot;Shock&quot; to &quot;videos/shock_treatment.mp4&quot;,&#10;&#10;        // Environmental Emergencies - Hazard response videos&#10;        &quot;Hypothermia&quot; to &quot;videos/hypothermia_warming.mp4&quot;,&#10;        &quot;Heat Exhaustion&quot; to &quot;videos/heat_exhaustion_cooling.mp4&quot;,&#10;        &quot;Bites and Stings&quot; to &quot;videos/bites_stings_treatment.mp4&quot;&#10;    )&#10;&#10;    /**&#10;     * Get the appropriate video for a first aid guide&#10;     * Falls back to a generic instructional video if specific video not found&#10;     */&#10;    fun getVideoForGuide(guideTitle: String): String? {&#10;        // Try exact match first&#10;        videoMap[guideTitle]?.let { return it }&#10;&#10;        // Try partial matching for guides with complex names&#10;        videoMap.forEach { (key, video) -&gt;&#10;            if (guideTitle.contains(key, ignoreCase = true)) {&#10;                return video&#10;            }&#10;        }&#10;&#10;        // Default fallback video&#10;        return &quot;videos/general_first_aid.mp4&quot;&#10;    }&#10;&#10;    /**&#10;     * Check if video file exists (for fallback purposes)&#10;     */&#10;    fun hasVideo(videoPath: String?): Boolean {&#10;        return !videoPath.isNullOrBlank()&#10;    }&#10;&#10;    /**&#10;     * Get all available video paths for preloading&#10;     */&#10;    fun getAllVideoPaths(): List&lt;String&gt; {&#10;        return videoMap.values.toList()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// This file has been replaced by PhotoMapper.kt&#10;// All video functionality has been removed and replaced with photo support" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/utils/DataInitializer_fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/utils/DataInitializer_fixed.kt" />
              <option name="updatedContent" value="package com.example.firstaidapp.utils&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.core.content.edit&#10;import com.example.firstaidapp.data.database.AppDatabase&#10;import com.example.firstaidapp.data.models.*&#10;import com.example.firstaidapp.utils.Constants.EMERGENCY_NUMBER_IN&#10;import com.example.firstaidapp.utils.Constants.POISON_CONTROL_IN&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.util.concurrent.atomic.AtomicBoolean&#10;&#10;object DataInitializer {&#10;&#10;    private const val TAG = &quot;DataInitializer&quot;&#10;    private val isInitialized = AtomicBoolean(false)&#10;&#10;    /**&#10;     * Public non-blocking entry used by older callers: launches the suspending initializer on IO.&#10;     */&#10;    fun initializeData(context: Context) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            initializeDataBlocking(context.applicationContext)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Suspends until initialization completes. This is the entrypoint used by WorkManager.&#10;     */&#10;    suspend fun initializeDataBlocking(context: Context) {&#10;        if (isInitialized.getAndSet(true)) {&#10;            Log.i(TAG, &quot;initializeData: Already initialized or in progress, skipping.&quot;)&#10;            return&#10;        }&#10;&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                Log.i(TAG, &quot;initializeData: starting initialization on IO thread (blocking)&quot;)&#10;                val database = AppDatabase.getDatabase(context)&#10;                val prefs = context.getSharedPreferences(&quot;first_aid_prefs&quot;, Context.MODE_PRIVATE)&#10;&#10;                val guidesCount = try { database.guideDao().getGuidesCount() } catch (e: Exception) { Log.e(TAG, &quot;count guides failed&quot;, e); 0 }&#10;                val contactsCount = try { database.contactDao().getContactsCount() } catch (e: Exception) { Log.e(TAG, &quot;count contacts failed&quot;, e); 0 }&#10;&#10;                Log.i(TAG, &quot;initializeData: guidesCount=$guidesCount, contactsCount=$contactsCount&quot;)&#10;&#10;                val expectedGuidesCount = 20&#10;                val needsFullReinitialization = guidesCount &lt; expectedGuidesCount&#10;&#10;                if (needsFullReinitialization) {&#10;                    Log.i(TAG, &quot;initializeData: forcing reinitialization - found $guidesCount guides, expected $expectedGuidesCount&quot;)&#10;&#10;                    database.guideDao().deleteAllGuides()&#10;                    database.contactDao().deleteAllContacts()&#10;&#10;                    try {&#10;                        Log.i(TAG, &quot;initializeData: initializing all $expectedGuidesCount guides&quot;)&#10;                        initializeGuides(database)&#10;                        Log.i(TAG, &quot;initializeData: guides initialized&quot;)&#10;                    } catch (e: Exception) {&#10;                        Log.e(TAG, &quot;Error initializing guides&quot;, e)&#10;                        isInitialized.set(false) &#10;                        return@withContext&#10;                    }&#10;&#10;                    try {&#10;                        Log.i(TAG, &quot;initializeData: initializing contacts&quot;)&#10;                        initializeContacts(database)&#10;                        Log.i(TAG, &quot;initializeData: contacts initialized&quot;)&#10;                    } catch (e: Exception) {&#10;                        Log.e(TAG, &quot;Error initializing contacts&quot;, e)&#10;                    }&#10;&#10;                    prefs.edit(commit = true) { putBoolean(&quot;data_initialized&quot;, true) }&#10;                    Log.i(TAG, &quot;initializeData: marked data_initialized=true&quot;)&#10;                } else {&#10;                    Log.i(TAG, &quot;initializeData: all guides already present ($guidesCount/$expectedGuidesCount)&quot;)&#10;                }&#10;&#10;            } catch (e: Throwable) {&#10;                Log.e(TAG, &quot;initializeData: unexpected error&quot;, e)&#10;                isInitialized.set(false) // Reset on failure to allow retry&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun initializeGuides(database: AppDatabase) {&#10;        val guides = listOf(&#10;            createCPRGuide(),&#10;            createChokingGuide(),&#10;            createBleedingGuide(),&#10;            createBurnsGuide(),&#10;            createFracturesGuide(),&#10;            createPoisoningGuide(),&#10;            createShockGuide(),&#10;            createHeartAttackGuide(),&#10;            createStrokeGuide(),&#10;            createAllergicReactionGuide(),&#10;            createSprainsStrainsGuide(),&#10;            createHypothermiaGuide(),&#10;            createHeatExhaustionGuide(),&#10;            createSeizuresGuide(),&#10;            createBitesStingsGuide(),&#10;            createAsthmaAttackGuide(),&#10;            createDiabeticEmergenciesGuide(),&#10;            createDrowningGuide(),&#10;            createNosebleedsGuide(),&#10;            createEyeInjuriesGuide()&#10;        )&#10;&#10;        for ((index, guide) in guides.withIndex()) {&#10;            try {&#10;                Log.i(TAG, &quot;insertGuide: inserting ${guide.id} (index=${index})&quot;)&#10;                database.guideDao().insertGuide(guide)&#10;                delay(50)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;insertGuide: failed to insert ${guide.id}&quot;, e)&#10;            }&#10;        }&#10;&#10;        Log.i(TAG, &quot;initializeGuides: completed inserting ${guides.size} guides&quot;)&#10;    }&#10;&#10;    private suspend fun initializeContacts(database: AppDatabase) {&#10;        val contacts = listOf(&#10;            EmergencyContact(&#10;                name = &quot;Emergency Services (All)&quot;,&#10;                phoneNumber = EMERGENCY_NUMBER_IN,&#10;                type = ContactType.EMERGENCY_SERVICE,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Unified emergency number for Police, Fire, and Medical emergencies in India&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;Police&quot;,&#10;                phoneNumber = &quot;100&quot;,&#10;                type = ContactType.POLICE,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Police emergency services&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;Fire Brigade&quot;,&#10;                phoneNumber = &quot;101&quot;,&#10;                type = ContactType.FIRE_DEPARTMENT,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Fire and rescue services&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;Medical Emergency&quot;,&#10;                phoneNumber = &quot;108&quot;,&#10;                type = ContactType.EMERGENCY_SERVICE,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Medical emergency and ambulance services&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;National Poison Information Centre&quot;,&#10;                phoneNumber = POISON_CONTROL_IN,&#10;                type = ContactType.POISON_CONTROL,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;24/7 poison emergency hotline in India&quot;&#10;            )&#10;        )&#10;&#10;        for ((index, contact) in contacts.withIndex()) {&#10;            try {&#10;                Log.i(TAG, &quot;insertContact: inserting ${contact.name} (index=${index})&quot;)&#10;                database.contactDao().insertContact(contact)&#10;                delay(30)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;insertContact: failed to insert ${contact.name}&quot;, e)&#10;            }&#10;        }&#10;&#10;        Log.i(TAG, &quot;initializeContacts: completed inserting ${contacts.size} contacts&quot;)&#10;    }&#10;&#10;    private fun createCPRGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;cpr_guide&quot;,&#10;            title = &quot;CPR (Cardiopulmonary Resuscitation)&quot;,&#10;            category = &quot;Life-Threatening&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Learn how to perform CPR to save a life when someone's heart stops beating.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;cpr_step_1&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 1, title = &quot;Check Responsiveness&quot;, description = &quot;Tap shoulders and shout 'Are you okay?'&quot;, stepType = StepType.CHECK, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_2&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 2, title = &quot;Call for Help&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.CALL, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_3&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 3, title = &quot;Position Patient&quot;, description = &quot;Position on firm surface, face up&quot;, stepType = StepType.ACTION),&#10;                GuideStep(id = &quot;cpr_step_4&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 4, title = &quot;Hand Placement&quot;, description = &quot;Place heel of hand on center of chest&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_5&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 5, title = &quot;Chest Compressions&quot;, description = &quot;Push hard and fast at least 2 inches deep&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_6&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 6, title = &quot;Continue Until Help Arrives&quot;, description = &quot;Keep doing compressions until emergency services arrive&quot;, stepType = StepType.REPEAT, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_cpr&quot;,&#10;            whenToCallEmergency = &quot;Person is unresponsive and not breathing normally&quot;,&#10;            warnings = listOf(&quot;Only perform if person is unresponsive&quot;, &quot;Don't be afraid to push hard&quot;),&#10;            estimatedTimeMinutes = 0,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createChokingGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;choking_guide&quot;,&#10;            title = &quot;Choking Emergency&quot;,&#10;            category = &quot;Respiratory&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Quick response to save someone who is choking and cannot breathe.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;choking_step_1&quot;, guideId = &quot;choking_guide&quot;, stepNumber = 1, title = &quot;Assess Situation&quot;, description = &quot;Ask 'Are you choking?' - if they can't speak, act immediately&quot;, stepType = StepType.CHECK, isCritical = true),&#10;                GuideStep(id = &quot;choking_step_2&quot;, guideId = &quot;choking_guide&quot;, stepNumber = 2, title = &quot;Position Behind Person&quot;, description = &quot;Stand behind and wrap arms around waist&quot;, stepType = StepType.ACTION),&#10;                GuideStep(id = &quot;choking_step_3&quot;, guideId = &quot;choking_guide&quot;, stepNumber = 3, title = &quot;Abdominal Thrusts&quot;, description = &quot;Give quick upward thrusts into abdomen&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_choking&quot;,&#10;            whenToCallEmergency = &quot;Person cannot speak, cough, or breathe&quot;,&#10;            warnings = listOf(&quot;Don't perform on pregnant women or infants&quot;),&#10;            estimatedTimeMinutes = 2,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createBleedingGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;bleeding_guide&quot;,&#10;            title = &quot;Severe Bleeding Control&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Stop severe bleeding to prevent shock and save a life.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;bleeding_step_1&quot;, guideId = &quot;bleeding_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 for severe bleeding&quot;, stepType = StepType.CALL, isCritical = true),&#10;                GuideStep(id = &quot;bleeding_step_2&quot;, guideId = &quot;bleeding_guide&quot;, stepNumber = 2, title = &quot;Apply Direct Pressure&quot;, description = &quot;Apply direct pressure with clean cloth&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_bleeding&quot;,&#10;            whenToCallEmergency = &quot;Heavy, continuous bleeding or blood spurting from wound&quot;,&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createBurnsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;burns_guide&quot;,&#10;            title = &quot;Burns Treatment&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Proper treatment of burns to prevent infection and promote healing.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;burns_step_1&quot;, guideId = &quot;burns_guide&quot;, stepNumber = 1, title = &quot;Remove from Source&quot;, description = &quot;Remove person from heat source&quot;, stepType = StepType.SAFETY, isCritical = true),&#10;                GuideStep(id = &quot;burns_step_2&quot;, guideId = &quot;burns_guide&quot;, stepNumber = 2, title = &quot;Cool the Burn&quot;, description = &quot;Cool with lukewarm water for 10-20 minutes&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;burns_step_3&quot;, guideId = &quot;burns_guide&quot;, stepNumber = 3, title = &quot;Apply Bandage&quot;, description = &quot;Apply loose, sterile bandage&quot;, stepType = StepType.ACTION)&#10;            ),&#10;            iconResName = &quot;ic_burns&quot;,&#10;            whenToCallEmergency = &quot;Burns larger than palm size or white/charred skin&quot;,&#10;            warnings = listOf(&quot;Don't use ice water&quot;, &quot;Don't apply butter or oil&quot;),&#10;            estimatedTimeMinutes = 20,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createFracturesGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;fractures_guide&quot;,&#10;            title = &quot;Broken Bones &amp; Fractures&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Immobilize and stabilize suspected fractures to prevent further injury.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;fractures_step_1&quot;, guideId = &quot;fractures_guide&quot;, stepNumber = 1, title = &quot;Don't Move Person&quot;, description = &quot;Don't move unless in immediate danger&quot;, stepType = StepType.SAFETY, isCritical = true),&#10;                GuideStep(id = &quot;fractures_step_2&quot;, guideId = &quot;fractures_guide&quot;, stepNumber = 2, title = &quot;Call Emergency&quot;, description = &quot;Call 112 for obvious fractures&quot;, stepType = StepType.EMERGENCY_CALL),&#10;                GuideStep(id = &quot;fractures_step_3&quot;, guideId = &quot;fractures_guide&quot;, stepNumber = 3, title = &quot;Immobilize Area&quot;, description = &quot;Immobilize above and below fracture&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_fracture&quot;,&#10;            whenToCallEmergency = &quot;Obvious deformity or bone visible through skin&quot;,&#10;            warnings = listOf(&quot;Don't try to realign broken bones&quot;),&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createPoisoningGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;poisoning_guide&quot;,&#10;            title = &quot;Poisoning Emergency&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Respond quickly to poisoning emergencies and prevent absorption.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;poisoning_step_1&quot;, guideId = &quot;poisoning_guide&quot;, stepNumber = 1, title = &quot;Call Poison Control&quot;, description = &quot;Call National Poison Information Centre immediately&quot;, stepType = StepType.CALL, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_poisoning&quot;,&#10;            whenToCallEmergency = &quot;If person is unconscious, having a seizure, or trouble breathing&quot;,&#10;            warnings = listOf(&quot;Do not induce vomiting unless told to do so&quot;),&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createShockGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;shock_guide&quot;,&#10;            title = &quot;Treating for Shock&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Recognize and treat shock, a life-threatening condition.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;shock_step_1&quot;, guideId = &quot;shock_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true),&#10;                GuideStep(id = &quot;shock_step_2&quot;, guideId = &quot;shock_guide&quot;, stepNumber = 2, title = &quot;Lay Person Down&quot;, description = &quot;Lay person down and elevate legs&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_shock&quot;,&#10;            whenToCallEmergency = &quot;Any signs of shock (clammy skin, weak pulse, confusion)&quot;,&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createHeartAttackGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;heart_attack_guide&quot;,&#10;            title = &quot;Heart Attack Response&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Recognize the signs of a heart attack and take immediate action.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;heart_attack_step_1&quot;, guideId = &quot;heart_attack_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true),&#10;                GuideStep(id = &quot;heart_attack_step_2&quot;, guideId = &quot;heart_attack_guide&quot;, stepNumber = 2, title = &quot;Help Person Rest&quot;, description = &quot;Have person sit down and rest&quot;, stepType = StepType.ACTION)&#10;            ),&#10;            iconResName = &quot;ic_heart_attack&quot;,&#10;            whenToCallEmergency = &quot;Chest pain, shortness of breath, or other heart attack signs&quot;,&#10;            warnings = listOf(&quot;Do not let the person drive to the hospital&quot;),&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createStrokeGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;stroke_guide&quot;,&#10;            title = &quot;Stroke (Brain Attack)&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Recognize and respond to the signs of a stroke using the F.A.S.T. method.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;stroke_step_1&quot;, guideId = &quot;stroke_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true),&#10;                GuideStep(id = &quot;stroke_step_2&quot;, guideId = &quot;stroke_guide&quot;, stepNumber = 2, title = &quot;Note the Time&quot;, description = &quot;Note the time when first symptoms appeared&quot;, stepType = StepType.CHECK, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_stroke&quot;,&#10;            whenToCallEmergency = &quot;Any sign of stroke (face drooping, arm weakness, speech difficulty)&quot;,&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createAllergicReactionGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;allergic_reaction_guide&quot;,&#10;            title = &quot;Anaphylaxis &amp; Severe Allergic Reactions&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Administer an epinephrine auto-injector and provide care for a severe allergic reaction.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;allergic_step_1&quot;, guideId = &quot;allergic_reaction_guide&quot;, stepNumber = 1, title = &quot;Use Epinephrine Auto-Injector&quot;, description = &quot;Help person use their epinephrine auto-injector&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;allergic_step_2&quot;, guideId = &quot;allergic_reaction_guide&quot;, stepNumber = 2, title = &quot;Call Emergency&quot;, description = &quot;Call 112 even after using injector&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_allergy&quot;,&#10;            whenToCallEmergency = &quot;Difficulty breathing, swelling of lips or tongue&quot;,&#10;            warnings = listOf(&quot;A second dose of epinephrine may be needed&quot;),&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createSprainsStrainsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;sprains_strains_guide&quot;,&#10;            title = &quot;Sprains and Strains&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;LOW&quot;,&#10;            description = &quot;Provide basic care for sprains and strains using the R.I.C.E. method.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_sprain&quot;,&#10;            whenToCallEmergency = &quot;If you can't move the injured joint or it's numb&quot;,&#10;            estimatedTimeMinutes = 20,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createHypothermiaGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;hypothermia_guide&quot;,&#10;            title = &quot;Hypothermia Care&quot;,&#10;            category = &quot;Environmental&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Warm someone who is dangerously cold and prevent further heat loss.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_hypothermia&quot;,&#10;            whenToCallEmergency = &quot;Loss of consciousness, slow breathing, or weak pulse&quot;,&#10;            warnings = listOf(&quot;Do not use direct heat like hot water or heating pads&quot;),&#10;            estimatedTimeMinutes = 30,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createHeatExhaustionGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;heat_exhaustion_guide&quot;,&#10;            title = &quot;Heat Exhaustion&quot;,&#10;            category = &quot;Environmental&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Cool down someone who is overheating to prevent heatstroke.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_heat_exhaustion&quot;,&#10;            whenToCallEmergency = &quot;If person's condition worsens or they become unconscious&quot;,&#10;            estimatedTimeMinutes = 30,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createSeizuresGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;seizures_guide&quot;,&#10;            title = &quot;Seizures &amp; Epilepsy&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Protect someone having a seizure from injury.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_seizure&quot;,&#10;            whenToCallEmergency = &quot;Seizure lasts more than 5 minutes or person is injured&quot;,&#10;            warnings = listOf(&quot;Do not put anything in the person's mouth&quot;),&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createBitesStingsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;bites_stings_guide&quot;,&#10;            title = &quot;Insect Bites &amp; Stings&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;LOW&quot;,&#10;            description = &quot;Provide comfort and care for common insect bites and stings.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_bites_stings&quot;,&#10;            whenToCallEmergency = &quot;Signs of a severe allergic reaction (anaphylaxis)&quot;,&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createAsthmaAttackGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;asthma_attack_guide&quot;,&#10;            title = &quot;Asthma Attack&quot;,&#10;            category = &quot;Respiratory&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Help someone use their inhaler and manage an asthma attack.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_asthma&quot;,&#10;            whenToCallEmergency = &quot;If the person's inhaler is not helping or they can't speak&quot;,&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createDiabeticEmergenciesGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;diabetic_emergencies_guide&quot;,&#10;            title = &quot;Diabetic Emergencies&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Recognize and help with low blood sugar (hypoglycemia).&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_diabetic&quot;,&#10;            whenToCallEmergency = &quot;If the person becomes unresponsive or can't swallow&quot;,&#10;            warnings = listOf(&quot;Do not give insulin unless you are trained to do so&quot;),&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createDrowningGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;drowning_guide&quot;,&#10;            title = &quot;Drowning Response&quot;,&#10;            category = &quot;Life-Threatening&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Provide rescue breaths and care after pulling someone from the water.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_drowning&quot;,&#10;            whenToCallEmergency = &quot;Always call for any drowning incident&quot;,&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createNosebleedsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;nosebleeds_guide&quot;,&#10;            title = &quot;Nosebleeds&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;LOW&quot;,&#10;            description = &quot;Simple steps to stop a common nosebleed.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_nosebleed&quot;,&#10;            whenToCallEmergency = &quot;If bleeding doesn't stop after 20 minutes&quot;,&#10;            estimatedTimeMinutes = 20,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createEyeInjuriesGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;eye_injuries_guide&quot;,&#10;            title = &quot;Eye Injuries&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Care for chemical splashes or foreign objects in the eye.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_eye_injury&quot;,&#10;            whenToCallEmergency = &quot;For any major eye injury or vision loss&quot;,&#10;            warnings = listOf(&quot;Do not rub the eye&quot;),&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>