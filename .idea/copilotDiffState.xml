<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    alias(libs.plugins.ksp)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;) version &quot;1.9.10&quot;&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.firstaidapp&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.firstaidapp&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        // Load API key from local.properties&#10;        val localProperties = Properties()&#10;        val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;        if (localPropertiesFile.exists()) {&#10;            localProperties.load(localPropertiesFile.inputStream())&#10;        }&#10;        &#10;        buildConfigField(&quot;String&quot;, &quot;GEMINI_API_KEY&quot;, &quot;\&quot;${localProperties.getProperty(&quot;GEMINI_API_KEY&quot;, &quot;&quot;)}\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;        dataBinding = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core Android&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;&#10;    // Lifecycle components&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Navigation Component&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;&#10;    // Room Database&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    implementation(libs.firebase.auth)&#10;    implementation(libs.androidx.credentials)&#10;    implementation(libs.androidx.credentials.play.services.auth)&#10;    implementation(libs.googleid)&#10;    implementation(libs.firebase.ai)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;    // Gson for JSON parsing&#10;    implementation(libs.gson)&#10;&#10;    // RecyclerView&#10;    implementation(libs.androidx.recyclerview)&#10;&#10;    // CardView&#10;    implementation(libs.androidx.cardview)&#10;&#10;    // ViewPager2&#10;    implementation(libs.androidx.viewpager2)&#10;&#10;    // FlexboxLayout&#10;    implementation(libs.flexbox)&#10;&#10;    // Firebase AI Logic&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:34.4.0&quot;))&#10;    implementation(&quot;com.google.firebase:firebase-ai&quot;)&#10;&#10;    // Google AI Client for Gemini&#10;    implementation(&quot;com.google.ai.client.generativeai:generativeai:0.7.0&quot;)&#10;&#10;    // Force Ktor 2.3.12 to match Google AI Client expectations and avoid conflicts&#10;    val ktorVersion = &quot;2.3.12&quot;&#10;    implementation(&quot;io.ktor:ktor-client-core:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-okhttp:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-content-negotiation:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-serialization-kotlinx-json:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-logging:$ktorVersion&quot;)&#10;&#10;    // Add missing Ktor dependencies that the AI client needs&#10;    implementation(&quot;io.ktor:ktor-utils:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-http:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-io:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-events:$ktorVersion&quot;)&#10;&#10;    // Force all Ktor dependencies to use the same version to avoid conflicts&#10;    configurations.all {&#10;        resolutionStrategy {&#10;            force(&quot;io.ktor:ktor-client-core:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-core-jvm:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-okhttp:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-content-negotiation:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-serialization-kotlinx-json:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-logging:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-utils:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-http:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-io:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-events:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-websockets:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-serialization:$ktorVersion&quot;)&#10;        }&#10;    }&#10;&#10;    // Kotlinx serialization&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3&quot;)&#10;&#10;&#10;    // Additional dependencies for audio handling&#10;    implementation(libs.media3.exoplayer)&#10;    implementation(libs.media3.ui)&#10;&#10;&#10;    // Voice Assistant Dependencies (speech recognition and animations)&#10;    implementation(libs.androidx.work.runtime.ktx)&#10;    implementation(libs.lottie)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(libs.androidx.room.testing)&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.jetbrains.kotlin.android)&#10;    alias(libs.plugins.ksp)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;) version &quot;2.1.0&quot;&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.firstaidapp&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.firstaidapp&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        // Load API key from local.properties&#10;        val localProperties = Properties()&#10;        val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;        if (localPropertiesFile.exists()) {&#10;            localProperties.load(localPropertiesFile.inputStream())&#10;        }&#10;        &#10;        buildConfigField(&quot;String&quot;, &quot;GEMINI_API_KEY&quot;, &quot;\&quot;${localProperties.getProperty(&quot;GEMINI_API_KEY&quot;, &quot;&quot;)}\&quot;&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;        dataBinding = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core Android&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;&#10;    // Lifecycle components&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    implementation(libs.androidx.lifecycle.livedata.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Navigation Component&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;&#10;    // Room Database&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    implementation(libs.firebase.auth)&#10;    implementation(libs.androidx.credentials)&#10;    implementation(libs.androidx.credentials.play.services.auth)&#10;    implementation(libs.googleid)&#10;    implementation(libs.firebase.ai)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;    // Gson for JSON parsing&#10;    implementation(libs.gson)&#10;&#10;    // RecyclerView&#10;    implementation(libs.androidx.recyclerview)&#10;&#10;    // CardView&#10;    implementation(libs.androidx.cardview)&#10;&#10;    // ViewPager2&#10;    implementation(libs.androidx.viewpager2)&#10;&#10;    // FlexboxLayout&#10;    implementation(libs.flexbox)&#10;&#10;    // Firebase AI Logic&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:34.4.0&quot;))&#10;    implementation(libs.firebase.ai)&#10;&#10;    // Google AI Client for Gemini&#10;    implementation(&quot;com.google.ai.client.generativeai:generativeai:0.7.0&quot;)&#10;&#10;    // Force Ktor 2.3.12 to match Google AI Client expectations and avoid conflicts&#10;    val ktorVersion = &quot;2.3.12&quot;&#10;    implementation(&quot;io.ktor:ktor-client-core:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-okhttp:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-content-negotiation:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-serialization-kotlinx-json:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-logging:$ktorVersion&quot;)&#10;&#10;    // Add missing Ktor dependencies that the AI client needs&#10;    implementation(&quot;io.ktor:ktor-utils:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-http:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-io:$ktorVersion&quot;)&#10;    implementation(&quot;io.ktor:ktor-events:$ktorVersion&quot;)&#10;&#10;    // Force all Ktor dependencies to use the same version to avoid conflicts&#10;    configurations.all {&#10;        resolutionStrategy {&#10;            force(&quot;io.ktor:ktor-client-core:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-core-jvm:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-okhttp:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-content-negotiation:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-serialization-kotlinx-json:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-client-logging:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-utils:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-http:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-io:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-events:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-websockets:$ktorVersion&quot;)&#10;            force(&quot;io.ktor:ktor-serialization:$ktorVersion&quot;)&#10;        }&#10;    }&#10;&#10;    // Kotlinx serialization&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3&quot;)&#10;&#10;&#10;    // Additional dependencies for audio handling&#10;    implementation(libs.media3.exoplayer)&#10;    implementation(libs.media3.ui)&#10;&#10;&#10;    // Voice Assistant Dependencies (speech recognition and animations)&#10;    implementation(libs.androidx.work.runtime.ktx)&#10;    implementation(libs.lottie)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(libs.androidx.room.testing)&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/ui/home/VideoMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/ui/home/VideoMapper.kt" />
              <option name="originalContent" value="package com.example.firstaidapp.ui.home&#10;&#10;/**&#10; * Maps first aid guide titles to their corresponding MP4 video files&#10; * This provides real video demonstrations for better understanding&#10; */&#10;object VideoMapper {&#10;&#10;    private val videoMap = mapOf(&#10;        // Life-Threatening Emergencies - Critical procedure videos&#10;        &quot;CPR&quot; to &quot;videos/cpr_demonstration.mp4&quot;,&#10;        &quot;Choking&quot; to &quot;videos/choking_heimlich.mp4&quot;,&#10;        &quot;Heart Attack&quot; to &quot;videos/heart_attack_response.mp4&quot;,&#10;        &quot;Stroke&quot; to &quot;videos/stroke_fast_assessment.mp4&quot;,&#10;        &quot;Drowning&quot; to &quot;videos/drowning_rescue.mp4&quot;,&#10;&#10;        // Trauma &amp; Injuries - Medical procedure videos&#10;        &quot;Severe Bleeding&quot; to &quot;videos/bleeding_control.mp4&quot;,&#10;        &quot;Burns&quot; to &quot;videos/burns_treatment.mp4&quot;,&#10;        &quot;Fractures&quot; to &quot;videos/fracture_immobilization.mp4&quot;,&#10;        &quot;Sprains and Strains&quot; to &quot;videos/sprain_care.mp4&quot;,&#10;        &quot;Eye Injuries&quot; to &quot;videos/eye_injury_care.mp4&quot;,&#10;        &quot;Nosebleeds&quot; to &quot;videos/nosebleed_control.mp4&quot;,&#10;&#10;        // Medical Conditions - Emergency response videos&#10;        &quot;Allergic Reactions&quot; to &quot;videos/anaphylaxis_epipen.mp4&quot;,&#10;        &quot;Asthma Attack&quot; to &quot;videos/asthma_inhaler.mp4&quot;,&#10;        &quot;Diabetic Emergencies&quot; to &quot;videos/diabetes_response.mp4&quot;,&#10;        &quot;Seizures&quot; to &quot;videos/seizure_response.mp4&quot;,&#10;        &quot;Poisoning&quot; to &quot;videos/poisoning_response.mp4&quot;,&#10;        &quot;Shock&quot; to &quot;videos/shock_treatment.mp4&quot;,&#10;&#10;        // Environmental Emergencies - Hazard response videos&#10;        &quot;Hypothermia&quot; to &quot;videos/hypothermia_warming.mp4&quot;,&#10;        &quot;Heat Exhaustion&quot; to &quot;videos/heat_exhaustion_cooling.mp4&quot;,&#10;        &quot;Bites and Stings&quot; to &quot;videos/bites_stings_treatment.mp4&quot;&#10;    )&#10;&#10;    /**&#10;     * Get the appropriate video for a first aid guide&#10;     * Falls back to a generic instructional video if specific video not found&#10;     */&#10;    fun getVideoForGuide(guideTitle: String): String? {&#10;        // Try exact match first&#10;        videoMap[guideTitle]?.let { return it }&#10;&#10;        // Try partial matching for guides with complex names&#10;        videoMap.forEach { (key, video) -&gt;&#10;            if (guideTitle.contains(key, ignoreCase = true)) {&#10;                return video&#10;            }&#10;        }&#10;&#10;        // Default fallback video&#10;        return &quot;videos/general_first_aid.mp4&quot;&#10;    }&#10;&#10;    /**&#10;     * Check if video file exists (for fallback purposes)&#10;     */&#10;    fun hasVideo(videoPath: String?): Boolean {&#10;        return !videoPath.isNullOrBlank()&#10;    }&#10;&#10;    /**&#10;     * Get all available video paths for preloading&#10;     */&#10;    fun getAllVideoPaths(): List&lt;String&gt; {&#10;        return videoMap.values.toList()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// This file has been replaced by PhotoMapper.kt&#10;// All video functionality has been removed and replaced with photo support" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/utils/DataInitializer_fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/firstaidapp/utils/DataInitializer_fixed.kt" />
              <option name="updatedContent" value="package com.example.firstaidapp.utils&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.core.content.edit&#10;import com.example.firstaidapp.data.database.AppDatabase&#10;import com.example.firstaidapp.data.models.*&#10;import com.example.firstaidapp.utils.Constants.EMERGENCY_NUMBER_IN&#10;import com.example.firstaidapp.utils.Constants.POISON_CONTROL_IN&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.util.concurrent.atomic.AtomicBoolean&#10;&#10;object DataInitializer {&#10;&#10;    private const val TAG = &quot;DataInitializer&quot;&#10;    private val isInitialized = AtomicBoolean(false)&#10;&#10;    /**&#10;     * Public non-blocking entry used by older callers: launches the suspending initializer on IO.&#10;     */&#10;    fun initializeData(context: Context) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            initializeDataBlocking(context.applicationContext)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Suspends until initialization completes. This is the entrypoint used by WorkManager.&#10;     */&#10;    suspend fun initializeDataBlocking(context: Context) {&#10;        if (isInitialized.getAndSet(true)) {&#10;            Log.i(TAG, &quot;initializeData: Already initialized or in progress, skipping.&quot;)&#10;            return&#10;        }&#10;&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                Log.i(TAG, &quot;initializeData: starting initialization on IO thread (blocking)&quot;)&#10;                val database = AppDatabase.getDatabase(context)&#10;                val prefs = context.getSharedPreferences(&quot;first_aid_prefs&quot;, Context.MODE_PRIVATE)&#10;&#10;                val guidesCount = try { database.guideDao().getGuidesCount() } catch (e: Exception) { Log.e(TAG, &quot;count guides failed&quot;, e); 0 }&#10;                val contactsCount = try { database.contactDao().getContactsCount() } catch (e: Exception) { Log.e(TAG, &quot;count contacts failed&quot;, e); 0 }&#10;&#10;                Log.i(TAG, &quot;initializeData: guidesCount=$guidesCount, contactsCount=$contactsCount&quot;)&#10;&#10;                val expectedGuidesCount = 20&#10;                val needsFullReinitialization = guidesCount &lt; expectedGuidesCount&#10;&#10;                if (needsFullReinitialization) {&#10;                    Log.i(TAG, &quot;initializeData: forcing reinitialization - found $guidesCount guides, expected $expectedGuidesCount&quot;)&#10;&#10;                    database.guideDao().deleteAllGuides()&#10;                    database.contactDao().deleteAllContacts()&#10;&#10;                    try {&#10;                        Log.i(TAG, &quot;initializeData: initializing all $expectedGuidesCount guides&quot;)&#10;                        initializeGuides(database)&#10;                        Log.i(TAG, &quot;initializeData: guides initialized&quot;)&#10;                    } catch (e: Exception) {&#10;                        Log.e(TAG, &quot;Error initializing guides&quot;, e)&#10;                        isInitialized.set(false) &#10;                        return@withContext&#10;                    }&#10;&#10;                    try {&#10;                        Log.i(TAG, &quot;initializeData: initializing contacts&quot;)&#10;                        initializeContacts(database)&#10;                        Log.i(TAG, &quot;initializeData: contacts initialized&quot;)&#10;                    } catch (e: Exception) {&#10;                        Log.e(TAG, &quot;Error initializing contacts&quot;, e)&#10;                    }&#10;&#10;                    prefs.edit(commit = true) { putBoolean(&quot;data_initialized&quot;, true) }&#10;                    Log.i(TAG, &quot;initializeData: marked data_initialized=true&quot;)&#10;                } else {&#10;                    Log.i(TAG, &quot;initializeData: all guides already present ($guidesCount/$expectedGuidesCount)&quot;)&#10;                }&#10;&#10;            } catch (e: Throwable) {&#10;                Log.e(TAG, &quot;initializeData: unexpected error&quot;, e)&#10;                isInitialized.set(false) // Reset on failure to allow retry&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun initializeGuides(database: AppDatabase) {&#10;        val guides = listOf(&#10;            createCPRGuide(),&#10;            createChokingGuide(),&#10;            createBleedingGuide(),&#10;            createBurnsGuide(),&#10;            createFracturesGuide(),&#10;            createPoisoningGuide(),&#10;            createShockGuide(),&#10;            createHeartAttackGuide(),&#10;            createStrokeGuide(),&#10;            createAllergicReactionGuide(),&#10;            createSprainsStrainsGuide(),&#10;            createHypothermiaGuide(),&#10;            createHeatExhaustionGuide(),&#10;            createSeizuresGuide(),&#10;            createBitesStingsGuide(),&#10;            createAsthmaAttackGuide(),&#10;            createDiabeticEmergenciesGuide(),&#10;            createDrowningGuide(),&#10;            createNosebleedsGuide(),&#10;            createEyeInjuriesGuide()&#10;        )&#10;&#10;        for ((index, guide) in guides.withIndex()) {&#10;            try {&#10;                Log.i(TAG, &quot;insertGuide: inserting ${guide.id} (index=${index})&quot;)&#10;                database.guideDao().insertGuide(guide)&#10;                delay(50)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;insertGuide: failed to insert ${guide.id}&quot;, e)&#10;            }&#10;        }&#10;&#10;        Log.i(TAG, &quot;initializeGuides: completed inserting ${guides.size} guides&quot;)&#10;    }&#10;&#10;    private suspend fun initializeContacts(database: AppDatabase) {&#10;        val contacts = listOf(&#10;            EmergencyContact(&#10;                name = &quot;Emergency Services (All)&quot;,&#10;                phoneNumber = EMERGENCY_NUMBER_IN,&#10;                type = ContactType.EMERGENCY_SERVICE,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Unified emergency number for Police, Fire, and Medical emergencies in India&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;Police&quot;,&#10;                phoneNumber = &quot;100&quot;,&#10;                type = ContactType.POLICE,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Police emergency services&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;Fire Brigade&quot;,&#10;                phoneNumber = &quot;101&quot;,&#10;                type = ContactType.FIRE_DEPARTMENT,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Fire and rescue services&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;Medical Emergency&quot;,&#10;                phoneNumber = &quot;108&quot;,&#10;                type = ContactType.EMERGENCY_SERVICE,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;Medical emergency and ambulance services&quot;&#10;            ),&#10;            EmergencyContact(&#10;                name = &quot;National Poison Information Centre&quot;,&#10;                phoneNumber = POISON_CONTROL_IN,&#10;                type = ContactType.POISON_CONTROL,&#10;                relationship = &quot;Emergency&quot;,&#10;                notes = &quot;24/7 poison emergency hotline in India&quot;&#10;            )&#10;        )&#10;&#10;        for ((index, contact) in contacts.withIndex()) {&#10;            try {&#10;                Log.i(TAG, &quot;insertContact: inserting ${contact.name} (index=${index})&quot;)&#10;                database.contactDao().insertContact(contact)&#10;                delay(30)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;insertContact: failed to insert ${contact.name}&quot;, e)&#10;            }&#10;        }&#10;&#10;        Log.i(TAG, &quot;initializeContacts: completed inserting ${contacts.size} contacts&quot;)&#10;    }&#10;&#10;    private fun createCPRGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;cpr_guide&quot;,&#10;            title = &quot;CPR (Cardiopulmonary Resuscitation)&quot;,&#10;            category = &quot;Life-Threatening&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Learn how to perform CPR to save a life when someone's heart stops beating.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;cpr_step_1&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 1, title = &quot;Check Responsiveness&quot;, description = &quot;Tap shoulders and shout 'Are you okay?'&quot;, stepType = StepType.CHECK, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_2&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 2, title = &quot;Call for Help&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.CALL, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_3&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 3, title = &quot;Position Patient&quot;, description = &quot;Position on firm surface, face up&quot;, stepType = StepType.ACTION),&#10;                GuideStep(id = &quot;cpr_step_4&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 4, title = &quot;Hand Placement&quot;, description = &quot;Place heel of hand on center of chest&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_5&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 5, title = &quot;Chest Compressions&quot;, description = &quot;Push hard and fast at least 2 inches deep&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;cpr_step_6&quot;, guideId = &quot;cpr_guide&quot;, stepNumber = 6, title = &quot;Continue Until Help Arrives&quot;, description = &quot;Keep doing compressions until emergency services arrive&quot;, stepType = StepType.REPEAT, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_cpr&quot;,&#10;            whenToCallEmergency = &quot;Person is unresponsive and not breathing normally&quot;,&#10;            warnings = listOf(&quot;Only perform if person is unresponsive&quot;, &quot;Don't be afraid to push hard&quot;),&#10;            estimatedTimeMinutes = 0,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createChokingGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;choking_guide&quot;,&#10;            title = &quot;Choking Emergency&quot;,&#10;            category = &quot;Respiratory&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Quick response to save someone who is choking and cannot breathe.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;choking_step_1&quot;, guideId = &quot;choking_guide&quot;, stepNumber = 1, title = &quot;Assess Situation&quot;, description = &quot;Ask 'Are you choking?' - if they can't speak, act immediately&quot;, stepType = StepType.CHECK, isCritical = true),&#10;                GuideStep(id = &quot;choking_step_2&quot;, guideId = &quot;choking_guide&quot;, stepNumber = 2, title = &quot;Position Behind Person&quot;, description = &quot;Stand behind and wrap arms around waist&quot;, stepType = StepType.ACTION),&#10;                GuideStep(id = &quot;choking_step_3&quot;, guideId = &quot;choking_guide&quot;, stepNumber = 3, title = &quot;Abdominal Thrusts&quot;, description = &quot;Give quick upward thrusts into abdomen&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_choking&quot;,&#10;            whenToCallEmergency = &quot;Person cannot speak, cough, or breathe&quot;,&#10;            warnings = listOf(&quot;Don't perform on pregnant women or infants&quot;),&#10;            estimatedTimeMinutes = 2,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createBleedingGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;bleeding_guide&quot;,&#10;            title = &quot;Severe Bleeding Control&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Stop severe bleeding to prevent shock and save a life.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;bleeding_step_1&quot;, guideId = &quot;bleeding_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 for severe bleeding&quot;, stepType = StepType.CALL, isCritical = true),&#10;                GuideStep(id = &quot;bleeding_step_2&quot;, guideId = &quot;bleeding_guide&quot;, stepNumber = 2, title = &quot;Apply Direct Pressure&quot;, description = &quot;Apply direct pressure with clean cloth&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_bleeding&quot;,&#10;            whenToCallEmergency = &quot;Heavy, continuous bleeding or blood spurting from wound&quot;,&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createBurnsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;burns_guide&quot;,&#10;            title = &quot;Burns Treatment&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Proper treatment of burns to prevent infection and promote healing.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;burns_step_1&quot;, guideId = &quot;burns_guide&quot;, stepNumber = 1, title = &quot;Remove from Source&quot;, description = &quot;Remove person from heat source&quot;, stepType = StepType.SAFETY, isCritical = true),&#10;                GuideStep(id = &quot;burns_step_2&quot;, guideId = &quot;burns_guide&quot;, stepNumber = 2, title = &quot;Cool the Burn&quot;, description = &quot;Cool with lukewarm water for 10-20 minutes&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;burns_step_3&quot;, guideId = &quot;burns_guide&quot;, stepNumber = 3, title = &quot;Apply Bandage&quot;, description = &quot;Apply loose, sterile bandage&quot;, stepType = StepType.ACTION)&#10;            ),&#10;            iconResName = &quot;ic_burns&quot;,&#10;            whenToCallEmergency = &quot;Burns larger than palm size or white/charred skin&quot;,&#10;            warnings = listOf(&quot;Don't use ice water&quot;, &quot;Don't apply butter or oil&quot;),&#10;            estimatedTimeMinutes = 20,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createFracturesGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;fractures_guide&quot;,&#10;            title = &quot;Broken Bones &amp; Fractures&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Immobilize and stabilize suspected fractures to prevent further injury.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;fractures_step_1&quot;, guideId = &quot;fractures_guide&quot;, stepNumber = 1, title = &quot;Don't Move Person&quot;, description = &quot;Don't move unless in immediate danger&quot;, stepType = StepType.SAFETY, isCritical = true),&#10;                GuideStep(id = &quot;fractures_step_2&quot;, guideId = &quot;fractures_guide&quot;, stepNumber = 2, title = &quot;Call Emergency&quot;, description = &quot;Call 112 for obvious fractures&quot;, stepType = StepType.EMERGENCY_CALL),&#10;                GuideStep(id = &quot;fractures_step_3&quot;, guideId = &quot;fractures_guide&quot;, stepNumber = 3, title = &quot;Immobilize Area&quot;, description = &quot;Immobilize above and below fracture&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_fracture&quot;,&#10;            whenToCallEmergency = &quot;Obvious deformity or bone visible through skin&quot;,&#10;            warnings = listOf(&quot;Don't try to realign broken bones&quot;),&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createPoisoningGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;poisoning_guide&quot;,&#10;            title = &quot;Poisoning Emergency&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Respond quickly to poisoning emergencies and prevent absorption.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;poisoning_step_1&quot;, guideId = &quot;poisoning_guide&quot;, stepNumber = 1, title = &quot;Call Poison Control&quot;, description = &quot;Call National Poison Information Centre immediately&quot;, stepType = StepType.CALL, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_poisoning&quot;,&#10;            whenToCallEmergency = &quot;If person is unconscious, having a seizure, or trouble breathing&quot;,&#10;            warnings = listOf(&quot;Do not induce vomiting unless told to do so&quot;),&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createShockGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;shock_guide&quot;,&#10;            title = &quot;Treating for Shock&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Recognize and treat shock, a life-threatening condition.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;shock_step_1&quot;, guideId = &quot;shock_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true),&#10;                GuideStep(id = &quot;shock_step_2&quot;, guideId = &quot;shock_guide&quot;, stepNumber = 2, title = &quot;Lay Person Down&quot;, description = &quot;Lay person down and elevate legs&quot;, stepType = StepType.ACTION, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_shock&quot;,&#10;            whenToCallEmergency = &quot;Any signs of shock (clammy skin, weak pulse, confusion)&quot;,&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createHeartAttackGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;heart_attack_guide&quot;,&#10;            title = &quot;Heart Attack Response&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Recognize the signs of a heart attack and take immediate action.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;heart_attack_step_1&quot;, guideId = &quot;heart_attack_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true),&#10;                GuideStep(id = &quot;heart_attack_step_2&quot;, guideId = &quot;heart_attack_guide&quot;, stepNumber = 2, title = &quot;Help Person Rest&quot;, description = &quot;Have person sit down and rest&quot;, stepType = StepType.ACTION)&#10;            ),&#10;            iconResName = &quot;ic_heart_attack&quot;,&#10;            whenToCallEmergency = &quot;Chest pain, shortness of breath, or other heart attack signs&quot;,&#10;            warnings = listOf(&quot;Do not let the person drive to the hospital&quot;),&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createStrokeGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;stroke_guide&quot;,&#10;            title = &quot;Stroke (Brain Attack)&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Recognize and respond to the signs of a stroke using the F.A.S.T. method.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;stroke_step_1&quot;, guideId = &quot;stroke_guide&quot;, stepNumber = 1, title = &quot;Call Emergency&quot;, description = &quot;Call 112 immediately&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true),&#10;                GuideStep(id = &quot;stroke_step_2&quot;, guideId = &quot;stroke_guide&quot;, stepNumber = 2, title = &quot;Note the Time&quot;, description = &quot;Note the time when first symptoms appeared&quot;, stepType = StepType.CHECK, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_stroke&quot;,&#10;            whenToCallEmergency = &quot;Any sign of stroke (face drooping, arm weakness, speech difficulty)&quot;,&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createAllergicReactionGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;allergic_reaction_guide&quot;,&#10;            title = &quot;Anaphylaxis &amp; Severe Allergic Reactions&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Administer an epinephrine auto-injector and provide care for a severe allergic reaction.&quot;,&#10;            steps = listOf(&#10;                GuideStep(id = &quot;allergic_step_1&quot;, guideId = &quot;allergic_reaction_guide&quot;, stepNumber = 1, title = &quot;Use Epinephrine Auto-Injector&quot;, description = &quot;Help person use their epinephrine auto-injector&quot;, stepType = StepType.ACTION, isCritical = true),&#10;                GuideStep(id = &quot;allergic_step_2&quot;, guideId = &quot;allergic_reaction_guide&quot;, stepNumber = 2, title = &quot;Call Emergency&quot;, description = &quot;Call 112 even after using injector&quot;, stepType = StepType.EMERGENCY_CALL, isCritical = true)&#10;            ),&#10;            iconResName = &quot;ic_allergy&quot;,&#10;            whenToCallEmergency = &quot;Difficulty breathing, swelling of lips or tongue&quot;,&#10;            warnings = listOf(&quot;A second dose of epinephrine may be needed&quot;),&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createSprainsStrainsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;sprains_strains_guide&quot;,&#10;            title = &quot;Sprains and Strains&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;LOW&quot;,&#10;            description = &quot;Provide basic care for sprains and strains using the R.I.C.E. method.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_sprain&quot;,&#10;            whenToCallEmergency = &quot;If you can't move the injured joint or it's numb&quot;,&#10;            estimatedTimeMinutes = 20,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createHypothermiaGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;hypothermia_guide&quot;,&#10;            title = &quot;Hypothermia Care&quot;,&#10;            category = &quot;Environmental&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Warm someone who is dangerously cold and prevent further heat loss.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_hypothermia&quot;,&#10;            whenToCallEmergency = &quot;Loss of consciousness, slow breathing, or weak pulse&quot;,&#10;            warnings = listOf(&quot;Do not use direct heat like hot water or heating pads&quot;),&#10;            estimatedTimeMinutes = 30,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createHeatExhaustionGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;heat_exhaustion_guide&quot;,&#10;            title = &quot;Heat Exhaustion&quot;,&#10;            category = &quot;Environmental&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Cool down someone who is overheating to prevent heatstroke.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_heat_exhaustion&quot;,&#10;            whenToCallEmergency = &quot;If person's condition worsens or they become unconscious&quot;,&#10;            estimatedTimeMinutes = 30,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createSeizuresGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;seizures_guide&quot;,&#10;            title = &quot;Seizures &amp; Epilepsy&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Protect someone having a seizure from injury.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_seizure&quot;,&#10;            whenToCallEmergency = &quot;Seizure lasts more than 5 minutes or person is injured&quot;,&#10;            warnings = listOf(&quot;Do not put anything in the person's mouth&quot;),&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createBitesStingsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;bites_stings_guide&quot;,&#10;            title = &quot;Insect Bites &amp; Stings&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;LOW&quot;,&#10;            description = &quot;Provide comfort and care for common insect bites and stings.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_bites_stings&quot;,&#10;            whenToCallEmergency = &quot;Signs of a severe allergic reaction (anaphylaxis)&quot;,&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createAsthmaAttackGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;asthma_attack_guide&quot;,&#10;            title = &quot;Asthma Attack&quot;,&#10;            category = &quot;Respiratory&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Help someone use their inhaler and manage an asthma attack.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_asthma&quot;,&#10;            whenToCallEmergency = &quot;If the person's inhaler is not helping or they can't speak&quot;,&#10;            estimatedTimeMinutes = 10,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createDiabeticEmergenciesGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;diabetic_emergencies_guide&quot;,&#10;            title = &quot;Diabetic Emergencies&quot;,&#10;            category = &quot;Medical Emergency&quot;,&#10;            severity = &quot;HIGH&quot;,&#10;            description = &quot;Recognize and help with low blood sugar (hypoglycemia).&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_diabetic&quot;,&#10;            whenToCallEmergency = &quot;If the person becomes unresponsive or can't swallow&quot;,&#10;            warnings = listOf(&quot;Do not give insulin unless you are trained to do so&quot;),&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createDrowningGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;drowning_guide&quot;,&#10;            title = &quot;Drowning Response&quot;,&#10;            category = &quot;Life-Threatening&quot;,&#10;            severity = &quot;CRITICAL&quot;,&#10;            description = &quot;Provide rescue breaths and care after pulling someone from the water.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_drowning&quot;,&#10;            whenToCallEmergency = &quot;Always call for any drowning incident&quot;,&#10;            estimatedTimeMinutes = 5,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;&#10;    private fun createNosebleedsGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;nosebleeds_guide&quot;,&#10;            title = &quot;Nosebleeds&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;LOW&quot;,&#10;            description = &quot;Simple steps to stop a common nosebleed.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_nosebleed&quot;,&#10;            whenToCallEmergency = &quot;If bleeding doesn't stop after 20 minutes&quot;,&#10;            estimatedTimeMinutes = 20,&#10;            difficulty = &quot;Beginner&quot;&#10;        )&#10;    }&#10;&#10;    private fun createEyeInjuriesGuide(): FirstAidGuide {&#10;        return FirstAidGuide(&#10;            id = &quot;eye_injuries_guide&quot;,&#10;            title = &quot;Eye Injuries&quot;,&#10;            category = &quot;Trauma&quot;,&#10;            severity = &quot;MEDIUM&quot;,&#10;            description = &quot;Care for chemical splashes or foreign objects in the eye.&quot;,&#10;            steps = emptyList(),&#10;            iconResName = &quot;ic_eye_injury&quot;,&#10;            whenToCallEmergency = &quot;For any major eye injury or vision loss&quot;,&#10;            warnings = listOf(&quot;Do not rub the eye&quot;),&#10;            estimatedTimeMinutes = 15,&#10;            difficulty = &quot;Intermediate&quot;&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;# Suppress the warning about using compileSdk = 36 with AGP 8.7.3&#10;android.suppressUnsupportedCompileSdk=36&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;# Suppress Java compiler deprecation warnings about source/target version 8&#10;android.javaCompile.suppressSourceTargetDeprecationWarning=true&#10;&#10;" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;# Configure Gradle to use JDK 17 for compatibility with Kotlin 2.1.0 and AGP&#10;org.gradle.java.home=C:\\Program Files\\Android\\Android Studio\\jbr&#10;# Suppress Java compiler deprecation warnings about source/target version 8&#10;android.javaCompile.suppressSourceTargetDeprecationWarning=true&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;google-gms-google-services = { id = &quot;com.google.gms.google-services&quot;, version.ref = &quot;googleGmsGoogleServices&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.7.3&quot;&#10;kotlin = &quot;2.1.0&quot;&#10;ksp = &quot;2.1.0-1.0.29&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;googleGmsGoogleServices = &quot;4.4.0&quot;&#10;coreKtx = &quot;1.12.0&quot;&#10;material = &quot;1.10.0&quot;&#10;activity = &quot;1.8.2&quot;&#10;constraintlayout = &quot;2.1.4&quot;&#10;lifecycle = &quot;2.7.0&quot;&#10;navigation = &quot;2.7.6&quot;&#10;room = &quot;2.6.1&quot;&#10;firebaseAuth = &quot;22.3.0&quot;&#10;credentials = &quot;1.2.2&quot;&#10;googleid = &quot;1.1.0&quot;&#10;firebaseAi = &quot;16.5.0&quot;&#10;coroutines = &quot;1.7.3&quot;&#10;gson = &quot;2.10.1&quot;&#10;recyclerview = &quot;1.3.2&quot;&#10;cardview = &quot;1.0.0&quot;&#10;viewpager2 = &quot;1.0.0&quot;&#10;flexbox = &quot;3.0.0&quot;&#10;media3 = &quot;1.2.1&quot;&#10;work = &quot;2.9.0&quot;&#10;lottie = &quot;6.2.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;androidxJunit = &quot;1.1.5&quot;&#10;espresso = &quot;3.5.1&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-activity = { group = &quot;androidx.activity&quot;, name = &quot;activity&quot;, version.ref = &quot;activity&quot; }&#10;androidx-constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;&#10;# Lifecycle components&#10;androidx-lifecycle-viewmodel-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-ktx&quot;, version.ref = &quot;lifecycle&quot; }&#10;androidx-lifecycle-livedata-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-livedata-ktx&quot;, version.ref = &quot;lifecycle&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycle&quot; }&#10;&#10;# Navigation Component&#10;androidx-navigation-fragment-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-fragment-ktx&quot;, version.ref = &quot;navigation&quot; }&#10;androidx-navigation-ui-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-ui-ktx&quot;, version.ref = &quot;navigation&quot; }&#10;&#10;# Room Database&#10;androidx-room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-testing = { group = &quot;androidx.room&quot;, name = &quot;room-testing&quot;, version.ref = &quot;room&quot; }&#10;&#10;# Firebase&#10;firebase-auth = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-auth&quot;, version.ref = &quot;firebaseAuth&quot; }&#10;firebase-ai = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-vertexai&quot;, version.ref = &quot;firebaseAi&quot; }&#10;&#10;# Credentials&#10;androidx-credentials = { group = &quot;androidx.credentials&quot;, name = &quot;credentials&quot;, version.ref = &quot;credentials&quot; }&#10;androidx-credentials-play-services-auth = { group = &quot;androidx.credentials&quot;, name = &quot;credentials-play-services-auth&quot;, version.ref = &quot;credentials&quot; }&#10;googleid = { group = &quot;com.google.android.libraries.identity.googleid&quot;, name = &quot;googleid&quot;, version.ref = &quot;googleid&quot; }&#10;&#10;# Coroutines&#10;kotlinx-coroutines-android = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-android&quot;, version.ref = &quot;coroutines&quot; }&#10;&#10;# Other libraries&#10;gson = { group = &quot;com.google.code.gson&quot;, name = &quot;gson&quot;, version.ref = &quot;gson&quot; }&#10;androidx-recyclerview = { group = &quot;androidx.recyclerview&quot;, name = &quot;recyclerview&quot;, version.ref = &quot;recyclerview&quot; }&#10;androidx-cardview = { group = &quot;androidx.cardview&quot;, name = &quot;cardview&quot;, version.ref = &quot;cardview&quot; }&#10;androidx-viewpager2 = { group = &quot;androidx.viewpager2&quot;, name = &quot;viewpager2&quot;, version.ref = &quot;viewpager2&quot; }&#10;flexbox = { group = &quot;com.google.android.flexbox&quot;, name = &quot;flexbox&quot;, version.ref = &quot;flexbox&quot; }&#10;&#10;# Media3&#10;media3-exoplayer = { group = &quot;androidx.media3&quot;, name = &quot;media3-exoplayer&quot;, version.ref = &quot;media3&quot; }&#10;media3-ui = { group = &quot;androidx.media3&quot;, name = &quot;media3-ui&quot;, version.ref = &quot;media3&quot; }&#10;&#10;# Work Manager and Lottie&#10;androidx-work-runtime-ktx = { group = &quot;androidx.work&quot;, name = &quot;work-runtime-ktx&quot;, version.ref = &quot;work&quot; }&#10;lottie = { group = &quot;com.airbnb.android&quot;, name = &quot;lottie&quot;, version.ref = &quot;lottie&quot; }&#10;&#10;# Testing&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;androidxJunit&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espresso&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;google-gms-google-services = { id = &quot;com.google.gms.google-services&quot;, version.ref = &quot;googleGmsGoogleServices&quot; }&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>